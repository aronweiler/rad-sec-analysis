from datetime import datetime
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field, ConfigDict

from .incident import SoftwareInfo


class CVEInfo(BaseModel):
    """Structured CVE information from NVD"""

    model_config = ConfigDict(json_encoders={datetime: lambda v: v.isoformat()})

    cve_id: str = Field(..., description="CVE identifier")
    description: str = Field(..., description="CVE description")
    published_date: datetime = Field(..., description="Publication date")
    last_modified: datetime = Field(..., description="Last modification date")
    cvss_v3_score: Optional[float] = Field(None, description="CVSS v3 base score")
    cvss_v3_severity: Optional[str] = Field(None, description="CVSS v3 severity")
    cvss_v2_score: Optional[float] = Field(None, description="CVSS v2 base score")
    cvss_v2_severity: Optional[str] = Field(None, description="CVSS v2 severity")
    cpe_matches: List[str] = Field(default_factory=list, description="CPE matches")
    references: List[str] = Field(default_factory=list, description="Reference URLs")
    weaknesses: List[str] = Field(default_factory=list, description="CWE identifiers")
    configurations: List[Dict[str, Any]] = Field(
        default_factory=list, description="Vulnerable configurations"
    )
    vendor_comments: List[str] = Field(
        default_factory=list, description="Vendor comments"
    )
    relevance_score: float = Field(0.0, description="Relevance score for filtering")
    age_days: int = Field(0, description="Age of CVE in days")


class SoftwareVulnerabilityReport(BaseModel):
    """Vulnerability report for a specific software"""

    model_config = ConfigDict(json_encoders={datetime: lambda v: v.isoformat()})

    software: SoftwareInfo = Field(..., description="Software information")
    cves: List[CVEInfo] = Field(default_factory=list, description="List of CVEs")
    recent_cves: List[CVEInfo] = Field(
        default_factory=list, description="Recent CVEs (last year)"
    )
    critical_count: int = Field(0, description="Count of critical vulnerabilities")
    high_count: int = Field(0, description="Count of high severity vulnerabilities")
    medium_count: int = Field(0, description="Count of medium severity vulnerabilities")
    low_count: int = Field(0, description="Count of low severity vulnerabilities")
    total_count: int = Field(0, description="Total count of vulnerabilities")
    recent_critical_count: int = Field(0, description="Recent critical vulnerabilities")
    recent_high_count: int = Field(0, description="Recent high vulnerabilities")
    avg_relevance_score: float = Field(0.0, description="Average relevance score")


class IncidentVulnerabilityReport(BaseModel):
    """Complete vulnerability report for an incident"""

    model_config = ConfigDict(json_encoders={datetime: lambda v: v.isoformat()})

    incident_id: str = Field(..., description="Incident identifier")
    software_reports: List[SoftwareVulnerabilityReport] = Field(
        default_factory=list, description="Software vulnerability reports"
    )
    total_vulnerabilities: int = Field(0, description="Total vulnerabilities count")
    recent_vulnerabilities: int = Field(0, description="Recent vulnerabilities count")
    critical_vulnerabilities: int = Field(
        0, description="Critical vulnerabilities count"
    )
    high_vulnerabilities: int = Field(
        0, description="High severity vulnerabilities count"
    )
    medium_vulnerabilities: int = Field(
        0, description="Medium severity vulnerabilities count"
    )
    low_vulnerabilities: int = Field(
        0, description="Low severity vulnerabilities count"
    )
    most_vulnerable_software: Optional[SoftwareInfo] = Field(
        None, description="Most vulnerable software"
    )
    most_recent_vulnerable_software: Optional[SoftwareInfo] = Field(
        None, description="Software with most recent vulnerabilities"
    )    
    analysis_config: Dict[str, Any] = Field(
        default_factory=dict, description="Configuration used for analysis"
    )
